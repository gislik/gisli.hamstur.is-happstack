module Main where

import HAppS.Server
import HAppS.State
import Control.Concurrent
import Control.Monad.Trans (liftIO)
import AppState
import AppState.Model
import Util
import Controller.Blog
import Controller.User
import Text.StringTemplate (newSTMP)

main :: IO ()
main = do
     putStrLn "Starting ..."
     control <- startSystemState entryPoint
     tid <- forkIO $ simpleHTTP (Conf {port=5000, validator=Nothing}) $
                   [dir "users" userController] ++ 
                   [dir "blogs" blogController] ++
                   [dir "static" [fileServe ["index.html"] "public"]] ++
                   [dir "proxy" [proxyServe ["google.com","*.google.com"]]] ++
                   [dir "src" [sourceServe ["Main.hs"] "src"]] ++
                   [dirindex [wrapLayout (anyRequest void)]]
     putStrLn "Started"
     waitForTermination
     putStrLn "Shutting down..."
     killThread tid
     shutdownSystem control
     putStrLn "Shutdown complete"

entryPoint :: Proxy AppState
entryPoint = Proxy

void :: WebT IO LayoutResponse
void = liftIO $ do
     returnLayout Nothing (attrSession "body" (newSTMP ""))
