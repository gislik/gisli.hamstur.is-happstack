{-# LANGUAGE TemplateHaskell, DeriveDataTypeable, TypeFamilies, 
             FlexibleContexts, FlexibleInstances,
             MultiParamTypeClasses, TypeSynonymInstances #-}
module AppState.Model where

import HAppS.Server
import HAppS.State
import Data.Generics
import Control.Monad.Reader
import Control.Monad.State
import Data.Map
import qualified Data.Map as M
import GHC.Conc
import Model.Blog
import Model.User
import Util

type SessionID = String

data Session a = Session {
     session :: Map SessionID a
} deriving (Show, Read, Eq, Data, Typeable)

instance Version (Session a)
$(deriveSerialize ''Session)

data SessionData = SessionData {
     user :: User
} deriving (Show, Read, Eq, Data, Typeable)

instance Version SessionData
$(deriveSerialize ''SessionData)




data AppState = AppState {
     blogs         :: Blogs,
     users         :: Users,
     sessions      :: Session SessionData
} deriving (Show, Read, Typeable, Data)                                         

instance Version AppState
$(deriveSerialize ''AppState) 

